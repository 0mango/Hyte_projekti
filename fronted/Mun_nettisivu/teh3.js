document.addEventListener("DOMContentLoaded", function () {
    const kirjauduNappi = document.getElementById("kirjaudu-nappi");
    const paivakirjaLinkki = document.querySelector(".top_nav a[href='#']");
    const popupTausta = document.getElementById("popup-tausta");
    const suljePopup = document.getElementById("sulje-popup");
    const kayttajaNimi = document.getElementById("name");
    const salasana = document.getElementById("password");
    const tallennaNappi = document.getElementById("tallenna");
    const isoLaatikko = document.getElementById("iso-laatikko");
    const lis√§√§Nappi = document.getElementById("lis√§√§_teksti");
    const tallennaMerkintaNappi = document.getElementById("tallennnus"); // üîπ Muutettu nimi
    const modal = document.getElementById("modal");
    const close = document.getElementById("close");
    const userInput = document.getElementById("userInput");

    isoLaatikko.style.display = "none";

    // N√§yt√§ popup, kun "P√§iv√§kirja" -linkki√§ painetaan
    paivakirjaLinkki.addEventListener("click", function (event) {
        event.preventDefault();
        popupTausta.style.display = "flex";
    });

    // Sulje popup, kun X-nappia painetaan
    suljePopup.addEventListener("click", function () {
        popupTausta.style.display = "none";
    });

    // Sulje popup, jos k√§ytt√§j√§ painaa taustaa
    popupTausta.addEventListener("click", function (event) {
        if (event.target === popupTausta) {
            popupTausta.style.display = "none";
        }
    });

    // üîπ Kirjautumisfunktio
    tallennaNappi.addEventListener("click", async function (event) {
        event.preventDefault();

        const name = kayttajaNimi.value;
        const password = salasana.value;

        try {
            const response = await fetch("http://localhost:3000/users/login", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ name, password })
            });

            const data = await response.json();
            alert(data.message);
            if (response.ok) {
                localStorage.setItem("token", data.token);  // üîπ Token tallennus
                popupTausta.style.display = "none";
                isoLaatikko.style.display = "block";
            }
        } catch (error) {
            console.error("Virhe kirjautumisessa:", error);
        }
    });

    // üîπ N√§yt√§ p√§iv√§kirjan lis√§ysikkuna
    lis√§√§Nappi.addEventListener("click", function () {
        modal.style.display = "block";
    });

    // üîπ Sulje modal-ikkuna
    close.addEventListener("click", function () {
        modal.style.display = "none";
    });

    // üîπ Tallennetaan p√§iv√§kirjamerkint√§ palvelimelle
    tallennaMerkintaNappi.addEventListener("click", async function () {
        const merkinta = userInput.value;
        const token = localStorage.getItem("token"); // üîπ Haetaan token kirjautumisesta

        if (!token) {
            alert("Sinun t√§ytyy kirjautua sis√§√§n!");
            return;
        }

        if (!merkinta.trim()) { // üîπ Tarkistetaan, ettei merkint√§ ole tyhj√§ tai pelkki√§ v√§lily√∂ntej√§
            alert("Merkint√§ ei voi olla tyhj√§!");
            return;
        }

        try {
            const response = await fetch("http://localhost:3000/entries", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Authorization": `Bearer ${token}`  // üîπ L√§hetet√§√§n token
                },
                body: JSON.stringify({ entry_text: merkinta })
            });

            const data = await response.json();
            if (response.ok) {
                alert(data.message);
                userInput.value = "";
                modal.style.display = "none";
            } else {
                alert("Virhe tallennettaessa: " + data.message);
            }
        } catch (error) {
            console.error("Virhe tallennuksessa:", error);
            alert("Yhteysvirhe!");
        }
    });
});
document.addEventListener("DOMContentLoaded", async function () {
    const token = localStorage.getItem("token");

    if (!token) {
        console.log("Ei kirjautunutta k√§ytt√§j√§√§.");
        return;
    }

    try {
        const response = await fetch("http://localhost:3000/entries", {
            method: "GET",
            headers: {
                "Authorization": `Bearer ${token}`
            }
        });

        const merkinn√§t = await response.json();
        console.log("P√§iv√§kirjamerkinn√§t:", merkinn√§t); // üîπ Tulostaa merkinn√§t konsoliin

    } catch (error) {
        console.error("Virhe haettaessa merkint√∂j√§:", error);
    }
});

document.addEventListener("DOMContentLoaded", async function () {
    const token = localStorage.getItem("token");
    const merkinnatDiv = document.getElementById("merkinta");

    if (!token) {
        merkinnatDiv.innerHTML = "<p>Sinun t√§ytyy kirjautua sis√§√§n n√§hd√§ksesi merkinn√§t.</p>";
        return;
    }

    try {
        const response = await fetch("http://localhost:3000/entries", {
            method: "GET",
            headers: {
                "Authorization": `Bearer ${token}`
            }
        });

        const merkinn√§t = await response.json();

        // üîπ Tyhjennet√§√§n ensin div, jos siell√§ on vanhoja merkint√∂j√§
        merkinnatDiv.innerHTML = "";

        if (merkinn√§t.length === 0) {
            merkinnatDiv.innerHTML = "<p>Ei viel√§ merkint√∂j√§.</p>";
        } else {
            // üîπ K√§yd√§√§n l√§pi kaikki merkinn√§t ja lis√§t√§√§n ne sivulle
            merkinn√§t.forEach(merkint√§ => {
                const merkint√§Elementti = document.createElement("div");
                merkint√§Elementti.classList.add("merkint√§"); // Lis√§√§ luokka CSS:√§√§ varten
                merkint√§Elementti.innerHTML = `
                    <p><strong>P√§iv√§kirjamerkint√§:</strong> ${merkint√§.entry_text}</p>
                    <small>${new Date(merkint√§.created_at).toLocaleString()}</small>
                    <hr>
                `;
                merkinnatDiv.appendChild(merkint√§Elementti);
            });
        }

    } catch (error) {
        console.error("Virhe haettaessa merkint√∂j√§:", error);
        merkinnatDiv.innerHTML = "<p>Virhe haettaessa merkint√∂j√§!</p>";
    }
});




